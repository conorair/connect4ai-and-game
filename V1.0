import numpy as np
import random
import time

def create_board():
    board = np.zeros((6, 7), dtype=int)
    return board

def drop_piece(board, row, col, piece):
    board[row][col] = piece

def is_valid_location(board, col):
    return board[0][col-1] == 0

def get_next_open_row(board, col):
    for r in range(5, -1, -1):
        if board[r][col-1] == 0:
            return r
    return None

def print_board(board):
    # Print grid
    for r in range(5, -1, -1):
        row = ""
        for c in range(7):
            if board[r][c] == 0:
                row += "‚ö™Ô∏è "
            elif board[r][c] == 1:
                row += "üî¥ "
            else:
                row += "üü° "
        print(row)

    print("1 2 3 4 5 6 7\n")

def winning_move(board, piece):
    # Check horizontal locations
    for c in range(4):
        for r in range(6):
            if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece:
                return True

    # Check vertical locations
    for c in range(7):
        for r in range(3):
            if board[r][c] == piece and board[r+1][c] == piece and board[r+2][c] == piece and board[r+3][c] == piece:
                return True

    # Check positively sloped diagonals
    for c in range(4):
        for r in range(3):
            if board[r][c] == piece and board[r+1][c+1] == piece and board[r+2][c+2] == piece and board[r+3][c+3] == piece:
                return True

    # Check negatively sloped diagonals
    for c in range(4):
        for r in range(3, 6):
            if board[r][c] == piece and board[r-1][c+1] == piece and board[r-2][c+2] == piece and board[r-3][c+3] == piece:
                return True

    return False

def score_position(board, piece):
    score = 0

    # Score center column
    center_array = [int(i) for i in list(board[:, 3])]
    center_count = center_array.count(piece)
    score += center_count * 3

    # Score horizontal
    for r in range(6):
        row_array = [int(i) for i in list(board[r, :])]
        for c in range(4):
            window = row_array[c:c+4]
            score += evaluate_window(window, piece)

    # Score vertical
    for c in range(7):
        col_array = [int(i) for i in list(board[:, c])]
        for r in range(3):
            window = col_array[r:r+4]
            score += evaluate_window(window, piece)

    # Score positive diagonal
    # Score negative diagonal
    for r in range(3):
        for c in range(4):
            window = [board[r+3-i][c+i] for i in range(4)]
            score += evaluate_window(window, piece)

    return score


def evaluate_window(window, piece):
    score = 0
    opp_piece = 1
    if piece == 1:
        opp_piece = 2

    if window.count(piece) == 4:
        score += 100
    elif window.count(piece) == 3 and window.count(0) == 1:
        score += 5
    elif window.count(piece) == 2 and window.count(0) == 2:
        score += 2

    if window.count(opp_piece) == 3 and window.count(0) == 1:
        score -= 4

    return score


board = create_board()
game_over = False
turn = random.randint(1, 2)

while not game_over:
    if turn == 1:
        col = int(input("Player 1 make your selection (1-7):"))
        if is_valid_location(board, col):
            row = get_next_open_row(board, col)
            drop_piece(board, row, col, 1)

            if winning_move(board, 1):
                print("Player 1 wins!")
                game_over = True

            turn = 2

    else:
        # Computer's turn
        print("Computer's turn...")
        time.sleep(2)

        col = random.randint(1, 7)
        if is_valid_location(board, col):
            row = get_next_open_row(board, col)
            drop_piece(board, row, col, 2)

            if winning_move(board, 2):
                print("Computer wins!")
                game_over = True

            turn = 1

    print_board(board)

    if np.count_nonzero(board == 0) == 0:
        print("It's a tie!")
        game_over = True

